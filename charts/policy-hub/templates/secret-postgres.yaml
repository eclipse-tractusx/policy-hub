
{{- if .Values.postgresql.enabled -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-phub-postgres
  namespace: {{ .Release.Namespace }}
type: Opaque
# use lookup function to check if secret exists
{{- $secret := (lookup "v1" "Secret" .Release.Namespace .Values.postgresql.auth.existingSecret) }}
{{ if $secret -}}
data:
  # if secret exists, use value provided from values file (to cover update scenario) or existing value from secret
  # use data map instead of stringData to prevent base64 encoding of already base64-encoded existing value from secret
  # use index function for secret keys with hyphen otherwise '$secret.data.secretKey' works too
  postgres-password: {{ ( .Values.secrets.postgresql.auth.existingSecret.postgrespassword | b64enc )  | default ( index $secret.data "postgres-password" ) | quote }}
  password: {{ ( .Values.secrets.postgresql.auth.existingSecret.password | b64enc ) | default $secret.data.password | quote }}
  replication-password: {{ ( .Values.secrets.postgresql.auth.existingSecret.replicationPassword | b64enc )  | default ( index $secret.data "replication-password" ) | quote}}
{{ else -}}
stringData:
  # if secret doesn't exist, use provided value from values file or generate a random one
  postgres-password: {{ .Values.secrets.postgresql.auth.existingSecret.postgrespassword | default ( randAlphaNum 32 ) | quote }}
  password: {{ .Values.secrets.postgresql.auth.existingSecret.password | default ( randAlphaNum 32 ) | quote }}
  replication-password: {{ .Values.secrets.postgresql.auth.existingSecret.replicationPassword | default ( randAlphaNum 32 ) | quote }}
{{ end }}
{{- end -}}
